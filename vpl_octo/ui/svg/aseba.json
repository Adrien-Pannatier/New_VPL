{
    "blocks": [
        {
            "name": "!stop",
            "aseba": {
                "statement": [
                    "motor.left.target = 0\n",
                    "motor.right.target = 0\n",
                    "call sound.system(-1)\n",
                    "call leds.circle(32,32,32,32,32,32,32,32)\n",
                    "timer.period[0] = 100\n",
                    "onevent timer0\n",
                    "call leds.circle(0,0,0,0,0,0,0,0)\n"
                ]
            }
        },
        {
            "name": "!stop and blink",
            "aseba": {
                "statement": [
                    "var i = 16\n",
                    "var s = 17\n",
                    "motor.left.target = 0\n",
                    "motor.right.target = 0\n",
                    "call sound.system(-1)\n",
                    "timer.period[0] = 125\n",
                    "onevent timer0\n",
                    "call leds.circle((s&1)<<5,(s&2)<<4,(s&4)<<3,(s&8)<<2,(s&16)<<1,s&32,(s&64)>>1,(s&128)>>2)\n",
                    "s = (s << 1) & 0xff | (s >> 7) & 1\n",
                    "i -= 1\n",
                    "if i < 0 then\n",
                    "timer.period[0] = 0\n",
                    "end\n"
                ]
            }
        },
        {
            "name": "!init",
            "aseba": {
                "initCodeExec": [
                    "call sound.system(-1)\n"
                ]
            }
        },
        {
            "name": "!volume",
            "aseba": {
                "statement": [
                    "# set volume\n",
                    "call _system.settings.write(0, `$[0] > 8 ? 0 : 8 - $[0]`)\n"
                ]
            }
        },
        {
            "name": "!trace",
            "aseba": {
                "statement": [
                    "emit trace `$[0]`\n"
                ]
            }
        },
        {
            "name": "button 1",
            "aseba": {
                "sectionBegin": "onevent buttons\n",
                "clause": "button.`['center', 'forward', 'backward', 'right', 'left'][$[0]]` != 0"
            }
        },
        {
            "name": "init",
            "aseba": {
                "sectionBegin": "# initialization\n"
            }
        },
        {
            "name": "state 256",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "clause": "state == `$.reduce(function (a, b, i) { return b ? a | (1 << i) : a; }, 0)`"
            }
        },
        {
            "name": "state 256 with mask",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "clause": "(state & `$.reduce(function (a, b, i) { return b !== 0 ? a | (1 << i) : a; }, 0)`) == `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << i) : a; }, 0)`"
            }
        },
        {
            "name": "clap",
            "aseba": {
                "initCodeExec": [
                    [
                        "# setup threshold for detecting claps\n",
                        "mic.threshold = 250\n"
                    ]
                ],
                "sectionBegin": "onevent buttons\n",
                "clause": "mic.intensity > mic.threshold"
            }
        },
        {
            "name": "ground",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clauseAnd": "`$[i] ? 'prox.ground.delta[' + i + '] ' + ($[i] > 0 ? '>= 450' : '<= 400') : ''`"
            }
        },
        {
            "name": "remote control arrows",
            "aseba": {
                "sectionBegin": "onevent rc5\n",
                "clause": "`[[85, 17], [80, 32], [81, 33], [86, 16, 78], [87, 13]][$[0]].map(function (c) { return 'rc5.command == ' + c; }).join(' or ')`",
                "clauseAlwaysEval": true
            }
        },
        {
            "name": "remote control keypad",
            "aseba": {
                "sectionBegin": "onevent rc5\n",
                "clause": "rc5.command == `$[0]`",
                "clauseAlwaysEval": true
            }
        },
        {
            "name": "timer",
            "aseba": {
                "initVarDecl": [
                    "var timerElapsed\n"
                ],
                "initCodeExec": [
                    [
                        "# stop timer 0\n",
                        "timer.period[0] = 0\n"
                    ],
                    "timerElapsed = 0\n"
                ],
                "sectionBegin": "onevent timer0\n",
                "sectionPreamble": [
                    "timerElapsed = 1\n",
                    "timer.period[0] = 0\n"
                ],
                "clauseAsCondition": "timerElapsed != 0"
            }
        },
        {
            "name": "clock",
            "aseba": {
                "sectionBegin": "onevent `$[0] === 10 ? 'prox' : 'buttons'`\n"
            }
        },
        {
            "name": "counter comparison",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "clause": "state `['<=','<','==','>','>='][$[0] + 2]` `$[1]`"
            }
        },
        {
            "name": "color all",
            "aseba": {
                "initVarDecl": [
                    [
                        "var G2[3]\n",
                        "var G3[3]\n",
                        "var GB[3]\n"
                    ]
                ],
                "initCodeExec": [
                    "G2 = [0, 0, 0]\n",
                    "G3 = [0, 0, 0]\n",
                    "GB = [0, 0, 0]\n",
                    [
                        "call leds.top(0, 0, 0)\n",
                        "call leds.bottom.left(0, 0, 0)\n",
                        "call leds.bottom.right(0, 0, 0)\n",
                        "call leds.circle(0, 0, 0, 0, 0, 0, 0, 0)\n"
                    ]
                ],
                "statement": [
                    "call leds.bottom.left(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[2]]`)\n",
                    "call leds.bottom.right(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[1]]`)\n",
                    "call leds.top(`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`)\n",
                    "G2 = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[2]]`]\n",
                    "G3 = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[1]]`]\n",
                    "GB = [`['0,0,0','32,0,0','0,32,0','32,32,0','0,0,32','32,0,32','0,32,32','32,32,32'][$[0]]`]\n"
                ]
            }
        },
        {
            "name": "color all state",
            "aseba": {
                "initVarDecl": [
                    [
                        "var G2[3]\n",
                        "var G3[3]\n",
                        "var GB[3]\n"
                    ]
                ],
                "initCodeExec": [
                    "G2 = [0, 0, 0]\n",
                    "G3 = [0, 0, 0]\n",
                    "GB = [0, 0, 0]\n"
                ],
				"clause": "G2[0] `$[2] % 2 ? '>=' : '<'` 16 and G3[0] `$[1] % 2 ? '>=' : '<'` 16 and G2[1] `$[2] % 4 >= 2 ? '>=' : '<'` 16 and G2[2] `$[2] >= 4 ? '>=' : '<'` 16 and G3[1] `$[1] % 4 >= 2 ? '>=' : '<'` 16 and G3[2] `$[1] >= 4 ? '>=' : '<'` 16 and GB[0] `$[0] % 2 ? '>=' : '<'` 16 and GB[1] `$[0] % 4 >= 2 ? '>=' : '<'` 16 and GB[2] `$[0] >= 4 ? '>=' : '<'` 16"
            }
        },
        {
            "name": "set state 256",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "initCodeDecl": [
                    [
                        "sub display_state\n",
                        "call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
                    ]
                ],
                "statement": [
                    "state = `$.reduce(function (a, b, i) { return b ? a | (1 << i) : a; }, 0)`\n",
                    "callsub display_state\n"
                ]
            }
        },
        {
            "name": "set state 256 with mask",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "initCodeDecl": [
                    [
                        "sub display_state\n",
                        "call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
                    ]
                ],
                "statement": "state = state & `$.reduce(function (a, b, i) { return b === 0 ? a | (1 << i) : a; }, 0)` | `$.reduce(function (a, b, i) { return b === 1 ? a | (1 << i) : a; }, 0)`\ncallsub display_state\n"
            }
        },
        {
            "name": "set timer",
            "aseba": {
                "initVarDecl": [
                    "var timerElapsed\n"
                ],
                "initCodeExec": [
                    [
                        "# stop timer 0\n",
                        "timer.period[0] = 0\n"
                    ],
                    "timerElapsed = 0\n"
                ],
                "statement": [
                    "timer.period[0] = `Math.round(1000 * $[0] / slowdown)`\n",
                    "timerElapsed = 0\n"
                ]
            }
        },
        {
            "name": "notes",
            "aseba": {
                "initVarDecl": [
                    [
                        "# variables for notes\n",
                        "var notes[6]\n",
                        "var durations[6]\n",
                        "var note_index\n",
                        "var note_count\n",
                        "var wave[142]\n",
                        "var i\n",
                        "var wave_phase\n",
                        "var wave_intensity\n"
                    ]
                ],
                "initCodeExec": [
                    [
                        "# init. variables for notes\n",
                        "note_index = 6\n",
                        "note_count = 6\n"
                    ],
                    [
                        "# compute a sinus wave for sound\n",
                        "for i in 0 : 141 do\n",
                        "wave_phase = (i - 70) * 468\n",
                        "call math.cos(wave_intensity, wave_phase)\n",
                        "wave[i] = wave_intensity / 256\n",
                        "end\n",
                        "call sound.wave(wave)\n"
                    ],
                    [
                        "call sound.system(-1)\n"
                    ]
                ],
                "initCodeDecl": [
                    [
                        "# when a note is finished, play the next one\n",
                        "onevent sound.finished\n",
                        "if note_index != note_count then\n",
                        "call sound.freq(notes[note_index], durations[note_index])\n",
                        "note_index++\n",
                        "end\n"
                    ]
                ],
                "statement": [
                    "notes = [`$.filter(function (a, i) { return i % 2 == 0; }).map(function (h, i) { return $[2 * i + 1] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
                    "durations = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return d ? 7 * d : 28; }).join(', ')`]\n",
                    "note_index = 1\n",
                    "note_count = 6\n",
                    "call sound.freq(notes[0], durations[0])\n"
                ]
            }
        },
        {
            "name": "notes with speed",
            "aseba": {
                "initVarDecl": [
                    [
                        "# variables for notes\n",
                        "var notes[6]\n",
                        "var durations[6]\n",
                        "var note_index\n",
                        "var note_count\n",
                        "var wave[142]\n",
                        "var i\n",
                        "var wave_phase\n",
                        "var wave_intensity\n"
                    ]
                ],
                "initCodeExec": [
                    [
                        "# init. variables for notes\n",
                        "note_index = 6\n",
                        "note_count = 6\n"
                    ],
                    [
                        "# compute a sinus wave for sound\n",
                        "for i in 0 : 141 do\n",
                        "wave_phase = (i - 70) * 468\n",
                        "call math.cos(wave_intensity, wave_phase)\n",
                        "wave[i] = wave_intensity / 256\n",
                        "end\n",
                        "call sound.wave(wave)\n"
                    ],
                    [
                        "call sound.system(-1)\n"
                    ]
                ],
                "initCodeDecl": [
                    [
                        "# when a note is finished, play the next one\n",
                        "onevent sound.finished\n",
                        "if note_index != note_count then\n",
                        "call sound.freq(notes[note_index], durations[note_index])\n",
                        "note_index++\n",
                        "end\n"
                    ]
                ],
                "statement": [
                    "notes = [`$.filter(function (a, i) { return i % 2 == 1; }).map(function (h, i) { return $[2 * i + 2] ? [262, 311, 370, 440, 524, 370][h] : 0; }).join(', ')`]\n",
                    "durations = [`$.slice(1).filter(function (a, i) { return i % 2 == 1; }).map(function (d) { return Math.round(Math.pow(2, $[0]) * 7) * (d ? d : 4); }).join(', ')`]\n",
                    "note_index = 1\n",
                    "note_count = 6\n",
                    "call sound.freq(notes[0], durations[0])\n"
                ]
            }
        },
        {
            "name": "play",
            "aseba": {
                "initCodeExec": [
                    "call sound.system(-1)\n"
                ],
                "statement": "call sound.play(`$[0].toString(10)`)\n"
            }
        },
        {
            "name": "play stop",
            "aseba": {
                "initCodeExec": [
                    "call sound.system(-1)\n"
                ],
                "statement": "call sound.play(-1)\n"
            }
        },
        {
            "name": "arithmetic",
            "aseba": {
                "initVarDecl": [
                    "var state\n"
                ],
                "initCodeExec": [
                    "state = 0\n"
                ],
                "initCodeDecl": [
                    [
                        "sub display_state\n",
                        "call leds.circle((state&1)*32,(state&2)*16,(state&4)*8,(state&8)*4,(state&16)*2,state&32,(state&64)/2,(state&128)/4)\n"
                    ]
                ],
                "statement": [
                    "`$[2] && $[0] != 0 && $[0] != 4 && $[1] != 0 ? 'if state ' + ($[0] == 2 ? '< ' + $[1] + ' then\\nstate = 0\\n' : '> ' + [null,255-$[1],null,Math.floor(255/$[1])][$[0]] + ' then\\nstate = 255\\n') + 'else\\nstate ' + ['','+','-','*','/'][$[0]] + '= ' + $[1] + '\\nend' : 'state ' + ['','+','-','*','/'][$[0]] + '= ' + $[1]`\n",
                    "callsub display_state\n"
                ]
            }
        },
        {
            "name": "button",
            "aseba": {
                "sectionBegin": "onevent buttons\n",
                "clause": "`['center', 'forward', 'backward', 'right', 'left'].map(function (s, i) { return $[i] ? 'button.' + s + ' != 0' : ''; }).filter(function (s) { return s; }).join(' and ') || ['center', 'forward', 'backward', 'right', 'left'].map(function (s) { return 'button.' + s + ' != 0'; }).join(' or ')`"
            }
        },
        {
            "name": "horiz prox",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clauseAnd": "`i < 4 && $[i] ? 'prox.horizontal[' + (i+1) + '] ' + ($[i] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * 0.5) + '00' : ''`"
            }
        },
        {
            "name": "horiz prox 1 adv",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clause": "`$[0] ? 'prox.horizontal['+1+'] ' + ($[0] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * (1-$[1])) + '00' : ''`"
            }
        },
        {
            "name": "horiz prox 2 adv",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clause": "`$[0] ? 'prox.horizontal['+2+'] ' + ($[0] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * (1+$[1])) + '00' : ''`"
            }
        },
        {
            "name": "horiz prox 3 adv",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clause": "`$[0] ? 'prox.horizontal['+3+'] ' + ($[0] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * (1+$[1])) + '00' : ''`"
            }
        },
        {
            "name": "horiz prox 4 adv",
            "aseba": {
                "sectionBegin": "onevent prox\n",
                "clause": "`$[0] ? 'prox.horizontal['+4+'] ' + ($[0] > 0 ? '>= ' : '<= ') + Math.round(7 + 33 * (1+$[1])) + '00' : ''`"
            }
        },
        {
            "name": "motor_octo",
            "aseba": {
                "initVarDecl": [
                    "var resistance_threshold = 70\n",
                    "var stop = 0\n",
                    "var left_diff  = 0\n",
                    "var start = 1\n",
                    "var done = 0\n"
                    ],
                "initCodeExec": [
                    [
                        "timer.period[1] = 50\n",
                        "timer.period[0] = 50\n"
                    ],
                    [
                        "onevent timer0\n"
                    ],
                    [
                        "if stop == 1 then\n",
                        "motor.left.target = 0\n",
                        "done = 1\n",
                        "end\n",
                        "if done == 0 then\n",
                        "left_diff = abs(motor.left.target - motor.left.speed)\n",
                        "if (left_diff > resistance_threshold and start == 0) then\n",
                        "motor.left.target = 0\n",
                        "done = 1\n",
                        "end\n",
                        "if start == 1 and left_diff <= 20 and left_diff != 0 then\n",
                        "start = 0\n",
                        "end\n",
                        "end\n"
                    ]
                ],
                "statement": [  
                                "done = 0\n",
                                "start = 1\n",
                                "stop = 0\n",
                                "left_diff = 0\n",
                                "motor.left.target = `Math.round(500 * ($[0]-0.5) * slowdown)`\n",
                                "if motor.left.target == 0 then\n",
                                "stop = 1\n",
                                "end\n"
                                ]
            }
        },
        {
            "name": "motor_rot",
            "aseba": {
                "initVarDecl": [
                    "var rot_counter = 0\n",
                    "var rot_stop_threshold = 100\n"
                    ],
                "initCodeExec": [
                    [
                        "timer.period[1] = 50\n",
                        "timer.period[0] = 50\n"
                    ],
                    [
                        "onevent timer0\n"
                    ],
                    [
                        "if rot_counter >= rot_stop_threshold then\n",
                        "motor.right.target = 0\n",
                        "end\n",
                        "rot_counter = rot_counter + 1\n"
                    ]
                ],
                "statement": [
                    "rot_counter = 0\n",
                    "motor.right.target = `Math.round(500 * ($[0]/20) * slowdown)`\n",
                    "if motor.left.target == 0 then\n",
                    "rot_counter = rot_stop_threshold\n",
                    "end\n"
                ]
            }
        }
    ]
}